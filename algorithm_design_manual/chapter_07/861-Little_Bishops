import java.util.Scanner;

class Main {
  public static void littleBishops(int n, int k){
    int board[][] = new int[n][n];
    System.out.println(backTrack(board, n, k, 0));
  }

  private static int backTrack(int[][] board, int n, int bishops, int pos){
    if(bishops == 0){
      return 1;
    }
    if(pos == n*n){
      return 0;
    }
    if (n*n - pos < bishops){
      return 0;
    }
    int result = 0;
    int i = pos/n;
    int j = pos%n;
    if(isValidMove(board, i, j)) {
      board[i][j] = 1;
      result += backTrack(board, n, bishops-1, pos+1);
      board[i][j] = 0;
    }
    result += backTrack(board, n, bishops, pos+1);

    return result;
  }

  public static boolean isValidMove(int[][] board, int row, int col){
  int i=row-1;
  int j=col-1;
  while(i>=0 && j>=0){
    if(board[i][j]==1)return false;
    i--;
    j--;
  }

  i=row-1;
  j=col+1;
  while(i>=0 && j<board[i].length){
    if(board[i][j]==1)return false;
    i--;
    j++;
  }

  /*i=row+1;
  j=col-1;
  while(i < board.length && j >=0){
    if(board[i][j]==1)return false;
    i++;
    j--;
  }

  i=row+1;
  j=col+1;
  while(i < board.length && j<board[i].length){
    if(board[i][j]==1)return false;
    i++;
    j++;
  }*/
  
  return true; 
  }

  

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    while(sc.hasNextInt()) {
      int n = sc.nextInt();
      int k = sc.nextInt();
      if(n == 0 && k == 0) break;
      littleBishops(n,k);
    }
    sc.close();
  }
}

